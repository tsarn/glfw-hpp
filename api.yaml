# This is an adapted description of GLFW's API in YAML format
# It was generated from the sources of the GLFW library, and then edited further
#
# GLFW is licensed under the following license (also see https://www.glfw.org/license):
# Copyright (c) 2002-2006 Marcus Geelnard
#
# Copyright (c) 2006-2019 Camilla LÃ¶wy
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
#
# This file is part of the "glfw.hpp" project, which licensed under the following license:
# Copyright (c) 2024 Nikita Tsarev
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

version: "3.4"

types:
  GLFWmonitor: "GLFWmonitor"
  GLFWwindow: "GLFWwindow"
  GLFWcursor: "GLFWcursor"
  GLFWvidmode: "GLFWvidmode"
  GLFWgammaramp: "GLFWgammaramp"
  GLFWimage: "GLFWimage"
  GLFWgamepadstate: "GLFWgamepadstate"
  GLFWallocator: "GLFWallocator"
  GLFWglproc: "void (*)(void)"
  GLFWvkproc: "void (*)(void)"
  GLFWallocatefun: "void* (*)(size_t size, void* user)"
  GLFWreallocatefun: "void* (*)(void* block, size_t size, void* user)"
  GLFWdeallocatefun: "void (*)(void* block, void* user)"
  GLFWerrorfun: "void (*)(int error_code, const char* description)"
  GLFWwindowposfun: "void (*)(GLFWwindow* window, int xpos, int ypos)"
  GLFWwindowsizefun: "void (*)(GLFWwindow* window, int width, int height)"
  GLFWwindowclosefun: "void (*)(GLFWwindow* window)"
  GLFWwindowrefreshfun: "void (*)(GLFWwindow* window)"
  GLFWwindowfocusfun: "void (*)(GLFWwindow* window, bool focused)"
  GLFWwindowiconifyfun: "void (*)(GLFWwindow* window, bool iconified)"
  GLFWwindowmaximizefun: "void (*)(GLFWwindow* window, bool maximized)"
  GLFWframebuffersizefun: "void (*)(GLFWwindow* window, int width, int height)"
  GLFWwindowcontentscalefun: "void (*)(GLFWwindow* window, float xscale, float yscale)"
  GLFWmousebuttonfun: "void (*)(GLFWwindow* window, Button button, Action action, Mods mods)"
  GLFWcursorposfun: "void (*)(GLFWwindow* window, double xpos, double ypos)"
  GLFWcursorenterfun: "void (*)(GLFWwindow* window, bool entered)"
  GLFWscrollfun: "void (*)(GLFWwindow* window, double xoffset, double yoffset)"
  GLFWkeyfun: "void (*)(GLFWwindow* window, Key key, int scancode, Action action, Mods mods)"
  GLFWcharfun: "void (*)(GLFWwindow* window, unsigned int codepoint)"
  GLFWcharmodsfun: "void (*)(GLFWwindow* window, unsigned int codepoint, int mods)"
  GLFWdropfun: "void (*)(GLFWwindow* window, int path_count, const char** paths)"
  GLFWmonitorfun: "void (*)(GLFWmonitor* monitor, int event)"
  GLFWjoystickfun: "void (*)(int jid, int event)"

functions:
- c_signature: "int glfwInit(void)"
  name: glfwInit
  parameters: []
  return:
    type: int
- c_signature: "void glfwTerminate(void)"
  name: glfwTerminate
  parameters: []
  return:
    type: void
- c_signature: "void glfwInitHint(int hint, int value)"
  name: glfwInitHint
  parameters:
  - name: hint
    type: int
    enum: init_hint
  - name: value
    type: int
  return:
    type: void
- c_signature: "void glfwInitAllocator(const GLFWallocator* allocator)"
  name: glfwInitAllocator
  parameters:
  - name: allocator
    type: const GLFWallocator*
  return:
    type: void
- c_signature: "void glfwInitVulkanLoader(PFN_vkGetInstanceProcAddr loader)"
  name: glfwInitVulkanLoader
  parameters:
  - name: loader
    type: PFN_vkGetInstanceProcAddr
  return:
    type: void
  features: [vulkan]
- c_signature: "void glfwGetVersion(int* major, int* minor, int* rev)"
  name: glfwGetVersion
  parameters:
  - name: major
    type: int*
    out: true
  - name: minor
    type: int*
    out: true
  - name: rev
    type: int*
    out: true
  return:
    type: void
- c_signature: "const char* glfwGetVersionString(void)"
  name: glfwGetVersionString
  parameters: []
  return:
    type: const char*
- c_signature: "int glfwGetError(const char** description)"
  name: glfwGetError
  parameters:
  - name: description
    type: const char**
    out: true
  return:
    type: int
    enum: error
- c_signature: "GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)"
  name: glfwSetErrorCallback
  parameters:
  - name: callback
    type: GLFWerrorfun
  return:
    type: GLFWerrorfun
- c_signature: "int glfwGetPlatform(void)"
  name: glfwGetPlatform
  parameters: []
  return:
    type: int
    enum: platform
- c_signature: "int glfwPlatformSupported(int platform)"
  name: glfwPlatformSupported
  parameters:
  - name: platform
    type: int
  return:
    type: int
    enum: bool
- c_signature: "GLFWmonitor** glfwGetMonitors(int* count)"
  name: glfwGetMonitors
  parameters:
  - name: count
    type: int*
    out: true
    count_for: return
  return:
    type: GLFWmonitor**
- c_signature: "GLFWmonitor* glfwGetPrimaryMonitor(void)"
  name: glfwGetPrimaryMonitor
  parameters: []
  return:
    type: GLFWmonitor*
- c_signature: "void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos)"
  name: glfwGetMonitorPos
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: xpos
    type: int*
    out: true
  - name: ypos
    type: int*
    out: true
  receiver: monitor
  return:
    type: void
- c_signature: "void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height)"
  name: glfwGetMonitorWorkarea
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: xpos
    type: int*
    out: true
  - name: ypos
    type: int*
    out: true
  - name: width
    type: int*
    out: true
  - name: height
    type: int*
    out: true
  receiver: monitor
  return:
    type: void
- c_signature: "void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM)"
  name: glfwGetMonitorPhysicalSize
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: widthMM
    type: int*
    out: true
  - name: heightMM
    type: int*
    out: true
  receiver: monitor
  return:
    type: void
- c_signature: "void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale)"
  name: glfwGetMonitorContentScale
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: xscale
    type: float*
    out: true
  - name: yscale
    type: float*
    out: true
  receiver: monitor
  return:
    type: void
- c_signature: "const char* glfwGetMonitorName(GLFWmonitor* monitor)"
  name: glfwGetMonitorName
  parameters:
  - name: monitor
    type: GLFWmonitor*
  receiver: monitor
  return:
    type: const char*
- c_signature: "void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer)"
  name: glfwSetMonitorUserPointer
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: pointer
    type: void*
  receiver: monitor
  return:
    type: void
- c_signature: "void* glfwGetMonitorUserPointer(GLFWmonitor* monitor)"
  name: glfwGetMonitorUserPointer
  parameters:
  - name: monitor
    type: GLFWmonitor*
  receiver: monitor
  return:
    type: void*
- c_signature: "GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)"
  name: glfwSetMonitorCallback
  parameters:
  - name: callback
    type: GLFWmonitorfun
  return:
    type: GLFWmonitorfun
- c_signature: "const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count)"
  name: glfwGetVideoModes
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: count
    type: int*
    out: true
    count_for: return
  receiver: monitor
  return:
    type: const GLFWvidmode*
- c_signature: "const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor)"
  name: glfwGetVideoMode
  parameters:
  - name: monitor
    type: GLFWmonitor*
  receiver: monitor
  return:
    type: const GLFWvidmode*
- c_signature: "void glfwSetGamma(GLFWmonitor* monitor, float gamma)"
  name: glfwSetGamma
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: gamma
    type: float
  receiver: monitor
  return:
    type: void
- c_signature: "const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor)"
  name: glfwGetGammaRamp
  parameters:
  - name: monitor
    type: GLFWmonitor*
  receiver: monitor
  return:
    type: const GLFWgammaramp*
- c_signature: "void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp)"
  name: glfwSetGammaRamp
  parameters:
  - name: monitor
    type: GLFWmonitor*
  - name: ramp
    type: const GLFWgammaramp*
  receiver: monitor
  return:
    type: void
- c_signature: "void glfwDefaultWindowHints(void)"
  name: glfwDefaultWindowHints
  parameters: []
  return:
    type: void
- c_signature: "void glfwWindowHint(int hint, int value)"
  name: glfwWindowHint
  parameters:
  - name: hint
    type: int
    enum: window_hint
  - name: value
    type: int
  return:
    type: void
- c_signature: "void glfwWindowHintString(int hint, const char* value)"
  name: glfwWindowHintString
  parameters:
  - name: hint
    type: int
    enum: window_hint
  - name: value
    type: const char*
  return:
    type: void
- c_signature: "GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share)"
  name: glfwCreateWindow
  parameters:
  - name: width
    type: int
  - name: height
    type: int
  - name: title
    type: const char*
  - name: monitor
    type: GLFWmonitor*
  - name: share
    type: GLFWwindow*
  return:
    type: GLFWwindow*
- c_signature: "void glfwDestroyWindow(GLFWwindow* window)"
  name: glfwDestroyWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "int glfwWindowShouldClose(GLFWwindow* window)"
  name: glfwWindowShouldClose
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: int
    enum: bool
- c_signature: "void glfwSetWindowShouldClose(GLFWwindow* window, int value)"
  name: glfwSetWindowShouldClose
  parameters:
  - name: window
    type: GLFWwindow*
  - name: value
    type: int
    enum: bool
  receiver: window
  return:
    type: void
- c_signature: "const char* glfwGetWindowTitle(GLFWwindow* window)"
  name: glfwGetWindowTitle
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: const char*
- c_signature: "void glfwSetWindowTitle(GLFWwindow* window, const char* title)"
  name: glfwSetWindowTitle
  parameters:
  - name: window
    type: GLFWwindow*
  - name: title
    type: const char*
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images)"
  name: glfwSetWindowIcon
  parameters:
  - name: window
    type: GLFWwindow*
  - name: count
    type: int
    count_for: images
  - name: images
    type: const GLFWimage*
  receiver: window
  return:
    type: void
- c_signature: "void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos)"
  name: glfwGetWindowPos
  parameters:
  - name: window
    type: GLFWwindow*
  - name: xpos
    type: int*
    out: true
  - name: ypos
    type: int*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos)"
  name: glfwSetWindowPos
  parameters:
  - name: window
    type: GLFWwindow*
  - name: xpos
    type: int
  - name: ypos
    type: int
  receiver: window
  return:
    type: void
- c_signature: "void glfwGetWindowSize(GLFWwindow* window, int* width, int* height)"
  name: glfwGetWindowSize
  parameters:
  - name: window
    type: GLFWwindow*
  - name: width
    type: int*
    out: true
  - name: height
    type: int*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight)"
  name: glfwSetWindowSizeLimits
  parameters:
  - name: window
    type: GLFWwindow*
  - name: minwidth
    type: int
  - name: minheight
    type: int
  - name: maxwidth
    type: int
  - name: maxheight
    type: int
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom)"
  name: glfwSetWindowAspectRatio
  parameters:
  - name: window
    type: GLFWwindow*
  - name: numer
    type: int
  - name: denom
    type: int
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowSize(GLFWwindow* window, int width, int height)"
  name: glfwSetWindowSize
  parameters:
  - name: window
    type: GLFWwindow*
  - name: width
    type: int
  - name: height
    type: int
  receiver: window
  return:
    type: void
- c_signature: "void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height)"
  name: glfwGetFramebufferSize
  parameters:
  - name: window
    type: GLFWwindow*
  - name: width
    type: int*
    out: true
  - name: height
    type: int*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom)"
  name: glfwGetWindowFrameSize
  parameters:
  - name: window
    type: GLFWwindow*
  - name: left
    type: int*
    out: true
  - name: top
    type: int*
    out: true
  - name: right
    type: int*
    out: true
  - name: bottom
    type: int*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale)"
  name: glfwGetWindowContentScale
  parameters:
  - name: window
    type: GLFWwindow*
  - name: xscale
    type: float*
    out: true
  - name: yscale
    type: float*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "float glfwGetWindowOpacity(GLFWwindow* window)"
  name: glfwGetWindowOpacity
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: float
- c_signature: "void glfwSetWindowOpacity(GLFWwindow* window, float opacity)"
  name: glfwSetWindowOpacity
  parameters:
  - name: window
    type: GLFWwindow*
  - name: opacity
    type: float
  receiver: window
  return:
    type: void
- c_signature: "void glfwIconifyWindow(GLFWwindow* window)"
  name: glfwIconifyWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwRestoreWindow(GLFWwindow* window)"
  name: glfwRestoreWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwMaximizeWindow(GLFWwindow* window)"
  name: glfwMaximizeWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwShowWindow(GLFWwindow* window)"
  name: glfwShowWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwHideWindow(GLFWwindow* window)"
  name: glfwHideWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwFocusWindow(GLFWwindow* window)"
  name: glfwFocusWindow
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwRequestWindowAttention(GLFWwindow* window)"
  name: glfwRequestWindowAttention
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window)"
  name: glfwGetWindowMonitor
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: GLFWmonitor*
- c_signature: "void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate)"
  name: glfwSetWindowMonitor
  parameters:
  - name: window
    type: GLFWwindow*
  - name: monitor
    type: GLFWmonitor*
  - name: xpos
    type: int
  - name: ypos
    type: int
  - name: width
    type: int
  - name: height
    type: int
  - name: refreshRate
    type: int
  receiver: window
  return:
    type: void
- c_signature: "int glfwGetWindowAttrib(GLFWwindow* window, int attrib)"
  name: glfwGetWindowAttrib
  parameters:
  - name: window
    type: GLFWwindow*
  - name: attrib
    type: int
    enum: window_attrib
  receiver: window
  return:
    type: bool
- c_signature: "void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value)"
  name: glfwSetWindowAttrib
  parameters:
  - name: window
    type: GLFWwindow*
  - name: attrib
    type: int
    enum: window_attrib
  - name: value
    type: int
    enum: bool
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer)"
  name: glfwSetWindowUserPointer
  parameters:
  - name: window
    type: GLFWwindow*
  - name: pointer
    type: void*
  receiver: window
  return:
    type: void
- c_signature: "void* glfwGetWindowUserPointer(GLFWwindow* window)"
  name: glfwGetWindowUserPointer
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void*
- c_signature: "GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback)"
  name: glfwSetWindowPosCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowposfun
  receiver: window
  return:
    type: GLFWwindowposfun
- c_signature: "GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback)"
  name: glfwSetWindowSizeCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowsizefun
  receiver: window
  return:
    type: GLFWwindowsizefun
- c_signature: "GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback)"
  name: glfwSetWindowCloseCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowclosefun
  receiver: window
  return:
    type: GLFWwindowclosefun
- c_signature: "GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback)"
  name: glfwSetWindowRefreshCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowrefreshfun
  receiver: window
  return:
    type: GLFWwindowrefreshfun
- c_signature: "GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback)"
  name: glfwSetWindowFocusCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowfocusfun
  receiver: window
  return:
    type: GLFWwindowfocusfun
- c_signature: "GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback)"
  name: glfwSetWindowIconifyCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowiconifyfun
  receiver: window
  return:
    type: GLFWwindowiconifyfun
- c_signature: "GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback)"
  name: glfwSetWindowMaximizeCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowmaximizefun
  receiver: window
  return:
    type: GLFWwindowmaximizefun
- c_signature: "GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback)"
  name: glfwSetFramebufferSizeCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWframebuffersizefun
  receiver: window
  return:
    type: GLFWframebuffersizefun
- c_signature: "GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback)"
  name: glfwSetWindowContentScaleCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWwindowcontentscalefun
  receiver: window
  return:
    type: GLFWwindowcontentscalefun
- c_signature: "void glfwPollEvents(void)"
  name: glfwPollEvents
  parameters: []
  return:
    type: void
- c_signature: "void glfwWaitEvents(void)"
  name: glfwWaitEvents
  parameters: []
  return:
    type: void
- c_signature: "void glfwWaitEventsTimeout(double timeout)"
  name: glfwWaitEventsTimeout
  parameters:
  - name: timeout
    type: double
  return:
    type: void
- c_signature: "void glfwPostEmptyEvent(void)"
  name: glfwPostEmptyEvent
  parameters: []
  return:
    type: void
- c_signature: "int glfwGetInputMode(GLFWwindow* window, int mode)"
  name: glfwGetInputMode
  parameters:
  - name: window
    type: GLFWwindow*
  - name: mode
    type: int
    enum: input_mode
  receiver: window
  return:
    type: int
- c_signature: "void glfwSetInputMode(GLFWwindow* window, int mode, int value)"
  name: glfwSetInputMode
  parameters:
  - name: window
    type: GLFWwindow*
  - name: mode
    type: int
    enum: input_mode
  - name: value
    type: int
  receiver: window
  return:
    type: void
- c_signature: "int glfwRawMouseMotionSupported(void)"
  name: glfwRawMouseMotionSupported
  parameters: []
  return:
    type: int
    enum: bool
- c_signature: "const char* glfwGetKeyName(int key, int scancode)"
  name: glfwGetKeyName
  parameters:
  - name: key
    type: int
    enum: key
  - name: scancode
    type: int
  return:
    type: const char*
- c_signature: "int glfwGetKeyScancode(int key)"
  name: glfwGetKeyScancode
  parameters:
  - name: key
    type: int
    enum: key
  return:
    type: int
- c_signature: "int glfwGetKey(GLFWwindow* window, int key)"
  name: glfwGetKey
  parameters:
  - name: window
    type: GLFWwindow*
  - name: key
    type: int
    enum: key
  receiver: window
  return:
    type: int
    enum: bool
- c_signature: "int glfwGetMouseButton(GLFWwindow* window, int button)"
  name: glfwGetMouseButton
  parameters:
  - name: window
    type: GLFWwindow*
  - name: button
    type: int
    enum: button
  receiver: window
  return:
    type: int
    enum: bool
- c_signature: "void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos)"
  name: glfwGetCursorPos
  parameters:
  - name: window
    type: GLFWwindow*
  - name: xpos
    type: double*
    out: true
  - name: ypos
    type: double*
    out: true
  receiver: window
  return:
    type: void
- c_signature: "void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos)"
  name: glfwSetCursorPos
  parameters:
  - name: window
    type: GLFWwindow*
  - name: xpos
    type: double
  - name: ypos
    type: double
  receiver: window
  return:
    type: void
- c_signature: "GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot)"
  name: glfwCreateCursor
  parameters:
  - name: image
    type: const GLFWimage*
  - name: xhot
    type: int
  - name: yhot
    type: int
  return:
    type: GLFWcursor*
- c_signature: "GLFWcursor* glfwCreateStandardCursor(int shape)"
  name: glfwCreateStandardCursor
  parameters:
  - name: shape
    type: int
    enum: cursor_shape
  return:
    type: GLFWcursor*
- c_signature: "void glfwDestroyCursor(GLFWcursor* cursor)"
  name: glfwDestroyCursor
  parameters:
  - name: cursor
    type: GLFWcursor*
  return:
    type: void
  receiver: cursor
- c_signature: "void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor)"
  name: glfwSetCursor
  parameters:
  - name: window
    type: GLFWwindow*
  - name: cursor
    type: GLFWcursor*
  receiver: window
  return:
    type: void
- c_signature: "GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback)"
  name: glfwSetKeyCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWkeyfun
  receiver: window
  return:
    type: GLFWkeyfun
- c_signature: "GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback)"
  name: glfwSetCharCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWcharfun
  receiver: window
  return:
    type: GLFWcharfun
- c_signature: "GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun callback)"
  name: glfwSetCharModsCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWcharmodsfun
  receiver: window
  return:
    type: GLFWcharmodsfun
- c_signature: "GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback)"
  name: glfwSetMouseButtonCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWmousebuttonfun
  receiver: window
  return:
    type: GLFWmousebuttonfun
- c_signature: "GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback)"
  name: glfwSetCursorPosCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWcursorposfun
  receiver: window
  return:
    type: GLFWcursorposfun
- c_signature: "GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback)"
  name: glfwSetCursorEnterCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWcursorenterfun
  receiver: window
  return:
    type: GLFWcursorenterfun
- c_signature: "GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback)"
  name: glfwSetScrollCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWscrollfun
  receiver: window
  return:
    type: GLFWscrollfun
- c_signature: "GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback)"
  name: glfwSetDropCallback
  parameters:
  - name: window
    type: GLFWwindow*
  - name: callback
    type: GLFWdropfun
  receiver: window
  return:
    type: GLFWdropfun
- c_signature: "int glfwJoystickPresent(int jid)"
  name: glfwJoystickPresent
  parameters:
  - name: jid
    type: int
  receiver: joystick
  return:
    type: int
- c_signature: "const float* glfwGetJoystickAxes(int jid, int* count)"
  name: glfwGetJoystickAxes
  parameters:
  - name: jid
    type: int
  - name: count
    type: int*
    out: true
    count_for: return
  receiver: joystick
  return:
    type: const float*
- c_signature: "const unsigned char* glfwGetJoystickButtons(int jid, int* count)"
  name: glfwGetJoystickButtons
  parameters:
  - name: jid
    type: int
  - name: count
    type: int*
    out: true
    count_for: return
  receiver: joystick
  return:
    type: const unsigned char*
- c_signature: "const unsigned char* glfwGetJoystickHats(int jid, int* count)"
  name: glfwGetJoystickHats
  parameters:
  - name: jid
    type: int
  - name: count
    type: int*
    out: true
    count_for: return
  receiver: joystick
  return:
    type: const unsigned char*
- c_signature: "const char* glfwGetJoystickName(int jid)"
  name: glfwGetJoystickName
  parameters:
  - name: jid
    type: int
  receiver: joystick
  return:
    type: const char*
- c_signature: "const char* glfwGetJoystickGUID(int jid)"
  name: glfwGetJoystickGUID
  parameters:
  - name: jid
    type: int
  receiver: joystick
  return:
    type: const char*
- c_signature: "void glfwSetJoystickUserPointer(int jid, void* pointer)"
  name: glfwSetJoystickUserPointer
  parameters:
  - name: jid
    type: int
  - name: pointer
    type: void*
  receiver: joystick
  return:
    type: void
- c_signature: "void* glfwGetJoystickUserPointer(int jid)"
  name: glfwGetJoystickUserPointer
  parameters:
  - name: jid
    type: int
  receiver: joystick
  return:
    type: void*
- c_signature: "int glfwJoystickIsGamepad(int jid)"
  name: glfwJoystickIsGamepad
  parameters:
  - name: jid
    type: int
  receiver: joystick
  return:
    type: int
- c_signature: "GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)"
  name: glfwSetJoystickCallback
  parameters:
  - name: callback
    type: GLFWjoystickfun
  return:
    type: GLFWjoystickfun
- c_signature: "int glfwUpdateGamepadMappings(const char* string)"
  name: glfwUpdateGamepadMappings
  parameters:
  - name: string
    type: const char*
  return:
    type: int
    enum: bool
- c_signature: "const char* glfwGetGamepadName(int jid)"
  name: glfwGetGamepadName
  parameters:
  - name: jid
    type: int
  receiver: gamepad
  return:
    type: const char*
- c_signature: "int glfwGetGamepadState(int jid, GLFWgamepadstate* state)"
  name: glfwGetGamepadState
  parameters:
  - name: jid
    type: int
  - name: state
    type: GLFWgamepadstate*
    out: true
  receiver: gamepad
  return:
    type: int
    enum: bool
- c_signature: "void glfwSetClipboardString(GLFWwindow* window, const char* string)"
  name: glfwSetClipboardString
  parameters:
  - name: window
    type: GLFWwindow*
  - name: string
    type: const char*
  receiver: window
  return:
    type: void
- c_signature: "const char* glfwGetClipboardString(GLFWwindow* window)"
  name: glfwGetClipboardString
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: const char*
- c_signature: "double glfwGetTime(void)"
  name: glfwGetTime
  parameters: []
  return:
    type: double
- c_signature: "void glfwSetTime(double time)"
  name: glfwSetTime
  parameters:
  - name: time
    type: double
  return:
    type: void
- c_signature: "uint64_t glfwGetTimerValue(void)"
  name: glfwGetTimerValue
  parameters: []
  return:
    type: uint64_t
- c_signature: "uint64_t glfwGetTimerFrequency(void)"
  name: glfwGetTimerFrequency
  parameters: []
  return:
    type: uint64_t
- c_signature: "void glfwMakeContextCurrent(GLFWwindow* window)"
  name: glfwMakeContextCurrent
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "GLFWwindow* glfwGetCurrentContext(void)"
  name: glfwGetCurrentContext
  parameters: []
  return:
    type: GLFWwindow*
- c_signature: "void glfwSwapBuffers(GLFWwindow* window)"
  name: glfwSwapBuffers
  parameters:
  - name: window
    type: GLFWwindow*
  receiver: window
  return:
    type: void
- c_signature: "void glfwSwapInterval(int interval)"
  name: glfwSwapInterval
  parameters:
  - name: interval
    type: int
  return:
    type: void
- c_signature: "int glfwExtensionSupported(const char* extension)"
  name: glfwExtensionSupported
  parameters:
  - name: extension
    type: const char*
  return:
    type: int
- c_signature: "GLFWglproc glfwGetProcAddress(const char* procname)"
  name: glfwGetProcAddress
  parameters:
  - name: procname
    type: const char*
  return:
    type: GLFWglproc
- c_signature: "int glfwVulkanSupported(void)"
  name: glfwVulkanSupported
  parameters: []
  return:
    type: int
    enum: bool
- c_signature: "const char** glfwGetRequiredInstanceExtensions(uint32_t* count)"
  name: glfwGetRequiredInstanceExtensions
  parameters:
  - name: count
    type: uint32_t*
    out: true
    count_for: return
  return:
    type: const char**
- c_signature: "GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance, const char* procname)"
  name: glfwGetInstanceProcAddress
  parameters:
  - name: instance
    type: VkInstance
  - name: procname
    type: const char*
  return:
    type: GLFWvkproc
  features: [vulkan]
- c_signature: "int glfwGetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily)"
  name: glfwGetPhysicalDevicePresentationSupport
  parameters:
  - name: instance
    type: VkInstance
  - name: device
    type: VkPhysicalDevice
  - name: queuefamily
    type: uint32_t
  return:
    type: int
    enum: bool
  features: [vulkan]
- c_signature: "VkResult glfwCreateWindowSurface(VkInstance instance, GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)"
  name: glfwCreateWindowSurface
  parameters:
  - name: instance
    type: VkInstance
  - name: window
    type: GLFWwindow*
  - name: allocator
    type: const VkAllocationCallbacks*
  - name: surface
    type: VkSurfaceKHR*
  return:
    type: VkResult
  features: [vulkan]
- c_signature: "WGPUSurface glfwGetWGPUSurface(WGPUInstance instance, GLFWwindow* window)"
  name: glfwGetWGPUSurface
  parameters:
  - name: instance
    type: WGPUInstance instance
  - name: window
    type: GLFWwindow*
  return:
    type: WGPUSurface
  features: [webgpu]

defines:
  GLFW_VERSION_MAJOR: 3
  GLFW_VERSION_MINOR: 4
  GLFW_VERSION_REVISION: 0
  GLFW_TRUE: 1
  GLFW_FALSE: 0
  GLFW_RELEASE: 0
  GLFW_PRESS: 1
  GLFW_REPEAT: 2
  GLFW_HAT_CENTERED: 0
  GLFW_HAT_UP: 1
  GLFW_HAT_RIGHT: 2
  GLFW_HAT_DOWN: 4
  GLFW_HAT_LEFT: 8
  GLFW_HAT_RIGHT_UP: 3
  GLFW_HAT_RIGHT_DOWN: 6
  GLFW_HAT_LEFT_UP: 9
  GLFW_HAT_LEFT_DOWN: 12
  GLFW_KEY_UNKNOWN: -1
  GLFW_KEY_SPACE: 32
  GLFW_KEY_APOSTROPHE: 39
  GLFW_KEY_COMMA: 44
  GLFW_KEY_MINUS: 45
  GLFW_KEY_PERIOD: 46
  GLFW_KEY_SLASH: 47
  GLFW_KEY_0: 48
  GLFW_KEY_1: 49
  GLFW_KEY_2: 50
  GLFW_KEY_3: 51
  GLFW_KEY_4: 52
  GLFW_KEY_5: 53
  GLFW_KEY_6: 54
  GLFW_KEY_7: 55
  GLFW_KEY_8: 56
  GLFW_KEY_9: 57
  GLFW_KEY_SEMICOLON: 59
  GLFW_KEY_EQUAL: 61
  GLFW_KEY_A: 65
  GLFW_KEY_B: 66
  GLFW_KEY_C: 67
  GLFW_KEY_D: 68
  GLFW_KEY_E: 69
  GLFW_KEY_F: 70
  GLFW_KEY_G: 71
  GLFW_KEY_H: 72
  GLFW_KEY_I: 73
  GLFW_KEY_J: 74
  GLFW_KEY_K: 75
  GLFW_KEY_L: 76
  GLFW_KEY_M: 77
  GLFW_KEY_N: 78
  GLFW_KEY_O: 79
  GLFW_KEY_P: 80
  GLFW_KEY_Q: 81
  GLFW_KEY_R: 82
  GLFW_KEY_S: 83
  GLFW_KEY_T: 84
  GLFW_KEY_U: 85
  GLFW_KEY_V: 86
  GLFW_KEY_W: 87
  GLFW_KEY_X: 88
  GLFW_KEY_Y: 89
  GLFW_KEY_Z: 90
  GLFW_KEY_LEFT_BRACKET: 91
  GLFW_KEY_BACKSLASH: 92
  GLFW_KEY_RIGHT_BRACKET: 93
  GLFW_KEY_GRAVE_ACCENT: 96
  GLFW_KEY_WORLD_1: 161
  GLFW_KEY_WORLD_2: 162
  GLFW_KEY_ESCAPE: 256
  GLFW_KEY_ENTER: 257
  GLFW_KEY_TAB: 258
  GLFW_KEY_BACKSPACE: 259
  GLFW_KEY_INSERT: 260
  GLFW_KEY_DELETE: 261
  GLFW_KEY_RIGHT: 262
  GLFW_KEY_LEFT: 263
  GLFW_KEY_DOWN: 264
  GLFW_KEY_UP: 265
  GLFW_KEY_PAGE_UP: 266
  GLFW_KEY_PAGE_DOWN: 267
  GLFW_KEY_HOME: 268
  GLFW_KEY_END: 269
  GLFW_KEY_CAPS_LOCK: 280
  GLFW_KEY_SCROLL_LOCK: 281
  GLFW_KEY_NUM_LOCK: 282
  GLFW_KEY_PRINT_SCREEN: 283
  GLFW_KEY_PAUSE: 284
  GLFW_KEY_F1: 290
  GLFW_KEY_F2: 291
  GLFW_KEY_F3: 292
  GLFW_KEY_F4: 293
  GLFW_KEY_F5: 294
  GLFW_KEY_F6: 295
  GLFW_KEY_F7: 296
  GLFW_KEY_F8: 297
  GLFW_KEY_F9: 298
  GLFW_KEY_F10: 299
  GLFW_KEY_F11: 300
  GLFW_KEY_F12: 301
  GLFW_KEY_F13: 302
  GLFW_KEY_F14: 303
  GLFW_KEY_F15: 304
  GLFW_KEY_F16: 305
  GLFW_KEY_F17: 306
  GLFW_KEY_F18: 307
  GLFW_KEY_F19: 308
  GLFW_KEY_F20: 309
  GLFW_KEY_F21: 310
  GLFW_KEY_F22: 311
  GLFW_KEY_F23: 312
  GLFW_KEY_F24: 313
  GLFW_KEY_F25: 314
  GLFW_KEY_KP_0: 320
  GLFW_KEY_KP_1: 321
  GLFW_KEY_KP_2: 322
  GLFW_KEY_KP_3: 323
  GLFW_KEY_KP_4: 324
  GLFW_KEY_KP_5: 325
  GLFW_KEY_KP_6: 326
  GLFW_KEY_KP_7: 327
  GLFW_KEY_KP_8: 328
  GLFW_KEY_KP_9: 329
  GLFW_KEY_KP_DECIMAL: 330
  GLFW_KEY_KP_DIVIDE: 331
  GLFW_KEY_KP_MULTIPLY: 332
  GLFW_KEY_KP_SUBTRACT: 333
  GLFW_KEY_KP_ADD: 334
  GLFW_KEY_KP_ENTER: 335
  GLFW_KEY_KP_EQUAL: 336
  GLFW_KEY_LEFT_SHIFT: 340
  GLFW_KEY_LEFT_CONTROL: 341
  GLFW_KEY_LEFT_ALT: 342
  GLFW_KEY_LEFT_SUPER: 343
  GLFW_KEY_RIGHT_SHIFT: 344
  GLFW_KEY_RIGHT_CONTROL: 345
  GLFW_KEY_RIGHT_ALT: 346
  GLFW_KEY_RIGHT_SUPER: 347
  GLFW_KEY_MENU: 348
  GLFW_KEY_LAST: 348
  GLFW_MOD_SHIFT: 1
  GLFW_MOD_CONTROL: 2
  GLFW_MOD_ALT: 4
  GLFW_MOD_SUPER: 8
  GLFW_MOD_CAPS_LOCK: 16
  GLFW_MOD_NUM_LOCK: 32
  GLFW_MOUSE_BUTTON_1: 0
  GLFW_MOUSE_BUTTON_2: 1
  GLFW_MOUSE_BUTTON_3: 2
  GLFW_MOUSE_BUTTON_4: 3
  GLFW_MOUSE_BUTTON_5: 4
  GLFW_MOUSE_BUTTON_6: 5
  GLFW_MOUSE_BUTTON_7: 6
  GLFW_MOUSE_BUTTON_8: 7
  GLFW_MOUSE_BUTTON_LAST: 7
  GLFW_MOUSE_BUTTON_LEFT: 0
  GLFW_MOUSE_BUTTON_RIGHT: 1
  GLFW_MOUSE_BUTTON_MIDDLE: 2
  GLFW_JOYSTICK_1: 0
  GLFW_JOYSTICK_2: 1
  GLFW_JOYSTICK_3: 2
  GLFW_JOYSTICK_4: 3
  GLFW_JOYSTICK_5: 4
  GLFW_JOYSTICK_6: 5
  GLFW_JOYSTICK_7: 6
  GLFW_JOYSTICK_8: 7
  GLFW_JOYSTICK_9: 8
  GLFW_JOYSTICK_10: 9
  GLFW_JOYSTICK_11: 10
  GLFW_JOYSTICK_12: 11
  GLFW_JOYSTICK_13: 12
  GLFW_JOYSTICK_14: 13
  GLFW_JOYSTICK_15: 14
  GLFW_JOYSTICK_16: 15
  GLFW_JOYSTICK_LAST: 15
  GLFW_GAMEPAD_BUTTON_A: 0
  GLFW_GAMEPAD_BUTTON_B: 1
  GLFW_GAMEPAD_BUTTON_X: 2
  GLFW_GAMEPAD_BUTTON_Y: 3
  GLFW_GAMEPAD_BUTTON_LEFT_BUMPER: 4
  GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER: 5
  GLFW_GAMEPAD_BUTTON_BACK: 6
  GLFW_GAMEPAD_BUTTON_START: 7
  GLFW_GAMEPAD_BUTTON_GUIDE: 8
  GLFW_GAMEPAD_BUTTON_LEFT_THUMB: 9
  GLFW_GAMEPAD_BUTTON_RIGHT_THUMB: 10
  GLFW_GAMEPAD_BUTTON_DPAD_UP: 11
  GLFW_GAMEPAD_BUTTON_DPAD_RIGHT: 12
  GLFW_GAMEPAD_BUTTON_DPAD_DOWN: 13
  GLFW_GAMEPAD_BUTTON_DPAD_LEFT: 14
  GLFW_GAMEPAD_BUTTON_LAST: 14
  GLFW_GAMEPAD_BUTTON_CROSS: 0
  GLFW_GAMEPAD_BUTTON_CIRCLE: 1
  GLFW_GAMEPAD_BUTTON_SQUARE: 2
  GLFW_GAMEPAD_BUTTON_TRIANGLE: 3
  GLFW_GAMEPAD_AXIS_LEFT_X: 0
  GLFW_GAMEPAD_AXIS_LEFT_Y: 1
  GLFW_GAMEPAD_AXIS_RIGHT_X: 2
  GLFW_GAMEPAD_AXIS_RIGHT_Y: 3
  GLFW_GAMEPAD_AXIS_LEFT_TRIGGER: 4
  GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER: 5
  GLFW_GAMEPAD_AXIS_LAST: 5
  GLFW_NO_ERROR: 0
  GLFW_NOT_INITIALIZED: 65537
  GLFW_NO_CURRENT_CONTEXT: 65538
  GLFW_INVALID_ENUM: 65539
  GLFW_INVALID_VALUE: 65540
  GLFW_OUT_OF_MEMORY: 65541
  GLFW_API_UNAVAILABLE: 65542
  GLFW_VERSION_UNAVAILABLE: 65543
  GLFW_PLATFORM_ERROR: 65544
  GLFW_FORMAT_UNAVAILABLE: 65545
  GLFW_NO_WINDOW_CONTEXT: 65546
  GLFW_CURSOR_UNAVAILABLE: 65547
  GLFW_FEATURE_UNAVAILABLE: 65548
  GLFW_FEATURE_UNIMPLEMENTED: 65549
  GLFW_PLATFORM_UNAVAILABLE: 65550
  GLFW_FOCUSED: 131073
  GLFW_ICONIFIED: 131074
  GLFW_RESIZABLE: 131075
  GLFW_VISIBLE: 131076
  GLFW_DECORATED: 131077
  GLFW_AUTO_ICONIFY: 131078
  GLFW_FLOATING: 131079
  GLFW_MAXIMIZED: 131080
  GLFW_CENTER_CURSOR: 131081
  GLFW_TRANSPARENT_FRAMEBUFFER: 131082
  GLFW_HOVERED: 131083
  GLFW_FOCUS_ON_SHOW: 131084
  GLFW_MOUSE_PASSTHROUGH: 131085
  GLFW_POSITION_X: 131086
  GLFW_POSITION_Y: 131087
  GLFW_RED_BITS: 135169
  GLFW_GREEN_BITS: 135170
  GLFW_BLUE_BITS: 135171
  GLFW_ALPHA_BITS: 135172
  GLFW_DEPTH_BITS: 135173
  GLFW_STENCIL_BITS: 135174
  GLFW_ACCUM_RED_BITS: 135175
  GLFW_ACCUM_GREEN_BITS: 135176
  GLFW_ACCUM_BLUE_BITS: 135177
  GLFW_ACCUM_ALPHA_BITS: 135178
  GLFW_AUX_BUFFERS: 135179
  GLFW_STEREO: 135180
  GLFW_SAMPLES: 135181
  GLFW_SRGB_CAPABLE: 135182
  GLFW_REFRESH_RATE: 135183
  GLFW_DOUBLEBUFFER: 135184
  GLFW_CLIENT_API: 139265
  GLFW_CONTEXT_VERSION_MAJOR: 139266
  GLFW_CONTEXT_VERSION_MINOR: 139267
  GLFW_CONTEXT_REVISION: 139268
  GLFW_CONTEXT_ROBUSTNESS: 139269
  GLFW_OPENGL_FORWARD_COMPAT: 139270
  GLFW_CONTEXT_DEBUG: 139271
  GLFW_OPENGL_DEBUG_CONTEXT: 139271
  GLFW_OPENGL_PROFILE: 139272
  GLFW_CONTEXT_RELEASE_BEHAVIOR: 139273
  GLFW_CONTEXT_NO_ERROR: 139274
  GLFW_CONTEXT_CREATION_API: 139275
  GLFW_SCALE_TO_MONITOR: 139276
  GLFW_SCALE_FRAMEBUFFER: 139277
  GLFW_COCOA_RETINA_FRAMEBUFFER: 143361
  GLFW_COCOA_FRAME_NAME: 143362
  GLFW_COCOA_GRAPHICS_SWITCHING: 143363
  GLFW_X11_CLASS_NAME: 147457
  GLFW_X11_INSTANCE_NAME: 147458
  GLFW_WIN32_KEYBOARD_MENU: 151553
  GLFW_WIN32_SHOWDEFAULT: 151554
  GLFW_WAYLAND_APP_ID: 155649
  GLFW_NO_API: 0
  GLFW_OPENGL_API: 196609
  GLFW_OPENGL_ES_API: 196610
  GLFW_NO_ROBUSTNESS: 0
  GLFW_NO_RESET_NOTIFICATION: 200705
  GLFW_LOSE_CONTEXT_ON_RESET: 200706
  GLFW_OPENGL_ANY_PROFILE: 0
  GLFW_OPENGL_CORE_PROFILE: 204801
  GLFW_OPENGL_COMPAT_PROFILE: 204802
  GLFW_CURSOR: 208897
  GLFW_STICKY_KEYS: 208898
  GLFW_STICKY_MOUSE_BUTTONS: 208899
  GLFW_LOCK_KEY_MODS: 208900
  GLFW_RAW_MOUSE_MOTION: 208901
  GLFW_CURSOR_NORMAL: 212993
  GLFW_CURSOR_HIDDEN: 212994
  GLFW_CURSOR_DISABLED: 212995
  GLFW_CURSOR_CAPTURED: 212996
  GLFW_ANY_RELEASE_BEHAVIOR: 0
  GLFW_RELEASE_BEHAVIOR_FLUSH: 217089
  GLFW_RELEASE_BEHAVIOR_NONE: 217090
  GLFW_NATIVE_CONTEXT_API: 221185
  GLFW_EGL_CONTEXT_API: 221186
  GLFW_OSMESA_CONTEXT_API: 221187
  GLFW_ANGLE_PLATFORM_TYPE_NONE: 225281
  GLFW_ANGLE_PLATFORM_TYPE_OPENGL: 225282
  GLFW_ANGLE_PLATFORM_TYPE_OPENGLES: 225283
  GLFW_ANGLE_PLATFORM_TYPE_D3D9: 225284
  GLFW_ANGLE_PLATFORM_TYPE_D3D11: 225285
  GLFW_ANGLE_PLATFORM_TYPE_VULKAN: 225287
  GLFW_ANGLE_PLATFORM_TYPE_METAL: 225288
  GLFW_WAYLAND_PREFER_LIBDECOR: 229377
  GLFW_WAYLAND_DISABLE_LIBDECOR: 229378
  GLFW_ANY_POSITION: -2147483648
  GLFW_ARROW_CURSOR: 221185
  GLFW_IBEAM_CURSOR: 221186
  GLFW_CROSSHAIR_CURSOR: 221187
  GLFW_POINTING_HAND_CURSOR: 221188
  GLFW_RESIZE_EW_CURSOR: 221189
  GLFW_RESIZE_NS_CURSOR: 221190
  GLFW_RESIZE_NWSE_CURSOR: 221191
  GLFW_RESIZE_NESW_CURSOR: 221192
  GLFW_RESIZE_ALL_CURSOR: 221193
  GLFW_NOT_ALLOWED_CURSOR: 221194
  GLFW_HRESIZE_CURSOR: 221189
  GLFW_VRESIZE_CURSOR: 221190
  GLFW_HAND_CURSOR: 221188
  GLFW_CONNECTED: 262145
  GLFW_DISCONNECTED: 262146
  GLFW_JOYSTICK_HAT_BUTTONS: 327681
  GLFW_ANGLE_PLATFORM_TYPE: 327682
  GLFW_PLATFORM: 327683
  GLFW_COCOA_CHDIR_RESOURCES: 331777
  GLFW_COCOA_MENUBAR: 331778
  GLFW_X11_XCB_VULKAN_SURFACE: 335873
  GLFW_WAYLAND_LIBDECOR: 339969
  GLFW_ANY_PLATFORM: 393216
  GLFW_PLATFORM_WIN32: 393217
  GLFW_PLATFORM_COCOA: 393218
  GLFW_PLATFORM_WAYLAND: 393219
  GLFW_PLATFORM_X11: 393220
  GLFW_PLATFORM_NULL: 393221
  GLFW_DONT_CARE: -1

enums:
  version_component:
    prefix: GLFW_VERSION_
    values:
      - GLFW_VERSION_MAJOR
      - GLFW_VERSION_MINOR
      - GLFW_VERSION_REVISION
  action:
    prefix: GLFW
    values:
      - GLFW_RELEASE
      - GLFW_PRESS
      - GLFW_REPEAT
  hat_state:
    prefix: GLFW_HAT_
    values:
      - GLFW_HAT_CENTERED
      - GLFW_HAT_UP
      - GLFW_HAT_RIGHT
      - GLFW_HAT_DOWN
      - GLFW_HAT_LEFT
      - GLFW_HAT_RIGHT_UP
      - GLFW_HAT_RIGHT_DOWN
      - GLFW_HAT_LEFT_UP
      - GLFW_HAT_LEFT_DOWN
  key:
    prefix: GLFW_KEY_
    values:
      - GLFW_KEY_UNKNOWN
      - GLFW_KEY_SPACE
      - GLFW_KEY_APOSTROPHE
      - GLFW_KEY_COMMA
      - GLFW_KEY_MINUS
      - GLFW_KEY_PERIOD
      - GLFW_KEY_SLASH
      - GLFW_KEY_0
      - GLFW_KEY_1
      - GLFW_KEY_2
      - GLFW_KEY_3
      - GLFW_KEY_4
      - GLFW_KEY_5
      - GLFW_KEY_6
      - GLFW_KEY_7
      - GLFW_KEY_8
      - GLFW_KEY_9
      - GLFW_KEY_SEMICOLON
      - GLFW_KEY_EQUAL
      - GLFW_KEY_A
      - GLFW_KEY_B
      - GLFW_KEY_C
      - GLFW_KEY_D
      - GLFW_KEY_E
      - GLFW_KEY_F
      - GLFW_KEY_G
      - GLFW_KEY_H
      - GLFW_KEY_I
      - GLFW_KEY_J
      - GLFW_KEY_K
      - GLFW_KEY_L
      - GLFW_KEY_M
      - GLFW_KEY_N
      - GLFW_KEY_O
      - GLFW_KEY_P
      - GLFW_KEY_Q
      - GLFW_KEY_R
      - GLFW_KEY_S
      - GLFW_KEY_T
      - GLFW_KEY_U
      - GLFW_KEY_V
      - GLFW_KEY_W
      - GLFW_KEY_X
      - GLFW_KEY_Y
      - GLFW_KEY_Z
      - GLFW_KEY_LEFT_BRACKET
      - GLFW_KEY_BACKSLASH
      - GLFW_KEY_RIGHT_BRACKET
      - GLFW_KEY_GRAVE_ACCENT
      - GLFW_KEY_WORLD_1
      - GLFW_KEY_WORLD_2
      - GLFW_KEY_ESCAPE
      - GLFW_KEY_ENTER
      - GLFW_KEY_TAB
      - GLFW_KEY_BACKSPACE
      - GLFW_KEY_INSERT
      - GLFW_KEY_DELETE
      - GLFW_KEY_RIGHT
      - GLFW_KEY_LEFT
      - GLFW_KEY_DOWN
      - GLFW_KEY_UP
      - GLFW_KEY_PAGE_UP
      - GLFW_KEY_PAGE_DOWN
      - GLFW_KEY_HOME
      - GLFW_KEY_END
      - GLFW_KEY_CAPS_LOCK
      - GLFW_KEY_SCROLL_LOCK
      - GLFW_KEY_NUM_LOCK
      - GLFW_KEY_PRINT_SCREEN
      - GLFW_KEY_PAUSE
      - GLFW_KEY_F1
      - GLFW_KEY_F2
      - GLFW_KEY_F3
      - GLFW_KEY_F4
      - GLFW_KEY_F5
      - GLFW_KEY_F6
      - GLFW_KEY_F7
      - GLFW_KEY_F8
      - GLFW_KEY_F9
      - GLFW_KEY_F10
      - GLFW_KEY_F11
      - GLFW_KEY_F12
      - GLFW_KEY_F13
      - GLFW_KEY_F14
      - GLFW_KEY_F15
      - GLFW_KEY_F16
      - GLFW_KEY_F17
      - GLFW_KEY_F18
      - GLFW_KEY_F19
      - GLFW_KEY_F20
      - GLFW_KEY_F21
      - GLFW_KEY_F22
      - GLFW_KEY_F23
      - GLFW_KEY_F24
      - GLFW_KEY_F25
      - GLFW_KEY_KP_0
      - GLFW_KEY_KP_1
      - GLFW_KEY_KP_2
      - GLFW_KEY_KP_3
      - GLFW_KEY_KP_4
      - GLFW_KEY_KP_5
      - GLFW_KEY_KP_6
      - GLFW_KEY_KP_7
      - GLFW_KEY_KP_8
      - GLFW_KEY_KP_9
      - GLFW_KEY_KP_DECIMAL
      - GLFW_KEY_KP_DIVIDE
      - GLFW_KEY_KP_MULTIPLY
      - GLFW_KEY_KP_SUBTRACT
      - GLFW_KEY_KP_ADD
      - GLFW_KEY_KP_ENTER
      - GLFW_KEY_KP_EQUAL
      - GLFW_KEY_LEFT_SHIFT
      - GLFW_KEY_LEFT_CONTROL
      - GLFW_KEY_LEFT_ALT
      - GLFW_KEY_LEFT_SUPER
      - GLFW_KEY_RIGHT_SHIFT
      - GLFW_KEY_RIGHT_CONTROL
      - GLFW_KEY_RIGHT_ALT
      - GLFW_KEY_RIGHT_SUPER
      - GLFW_KEY_MENU
      - GLFW_KEY_LAST
  mods:
    prefix: GLFW_MOD_
    values:
      - GLFW_MOD_SHIFT
      - GLFW_MOD_CONTROL
      - GLFW_MOD_ALT
      - GLFW_MOD_SUPER
      - GLFW_MOD_CAPS_LOCK
      - GLFW_MOD_NUM_LOCK
  button:
    prefix: GLFW_MOUSE_BUTTON_
    values:
      - GLFW_MOUSE_BUTTON_1
      - GLFW_MOUSE_BUTTON_2
      - GLFW_MOUSE_BUTTON_3
      - GLFW_MOUSE_BUTTON_4
      - GLFW_MOUSE_BUTTON_5
      - GLFW_MOUSE_BUTTON_6
      - GLFW_MOUSE_BUTTON_7
      - GLFW_MOUSE_BUTTON_8
      - GLFW_MOUSE_BUTTON_LAST
      - GLFW_MOUSE_BUTTON_LEFT
      - GLFW_MOUSE_BUTTON_RIGHT
      - GLFW_MOUSE_BUTTON_MIDDLE
  joystick:
    prefix: GLFW_JOYSTICK_
    values:
      - GLFW_JOYSTICK_1
      - GLFW_JOYSTICK_2
      - GLFW_JOYSTICK_3
      - GLFW_JOYSTICK_4
      - GLFW_JOYSTICK_5
      - GLFW_JOYSTICK_6
      - GLFW_JOYSTICK_7
      - GLFW_JOYSTICK_8
      - GLFW_JOYSTICK_9
      - GLFW_JOYSTICK_10
      - GLFW_JOYSTICK_11
      - GLFW_JOYSTICK_12
      - GLFW_JOYSTICK_13
      - GLFW_JOYSTICK_14
      - GLFW_JOYSTICK_15
      - GLFW_JOYSTICK_16
      - GLFW_JOYSTICK_LAST
  gamepad_button:
    prefix: GLFW_GAMEPAD_BUTTON_
    values:
      - GLFW_GAMEPAD_BUTTON_A
      - GLFW_GAMEPAD_BUTTON_B
      - GLFW_GAMEPAD_BUTTON_X
      - GLFW_GAMEPAD_BUTTON_Y
      - GLFW_GAMEPAD_BUTTON_LEFT_BUMPER
      - GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER
      - GLFW_GAMEPAD_BUTTON_BACK
      - GLFW_GAMEPAD_BUTTON_START
      - GLFW_GAMEPAD_BUTTON_GUIDE
      - GLFW_GAMEPAD_BUTTON_LEFT_THUMB
      - GLFW_GAMEPAD_BUTTON_RIGHT_THUMB
      - GLFW_GAMEPAD_BUTTON_DPAD_UP
      - GLFW_GAMEPAD_BUTTON_DPAD_RIGHT
      - GLFW_GAMEPAD_BUTTON_DPAD_DOWN
      - GLFW_GAMEPAD_BUTTON_DPAD_LEFT
      - GLFW_GAMEPAD_BUTTON_LAST
      - GLFW_GAMEPAD_BUTTON_CROSS
      - GLFW_GAMEPAD_BUTTON_CIRCLE
      - GLFW_GAMEPAD_BUTTON_SQUARE
      - GLFW_GAMEPAD_BUTTON_TRIANGLE
  gamepad_axis:
    prefix: GLFW_GAMEPAD_AXIS_
    values:
      - GLFW_GAMEPAD_AXIS_LEFT_X
      - GLFW_GAMEPAD_AXIS_LEFT_Y
      - GLFW_GAMEPAD_AXIS_RIGHT_X
      - GLFW_GAMEPAD_AXIS_RIGHT_Y
      - GLFW_GAMEPAD_AXIS_LEFT_TRIGGER
      - GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER
      - GLFW_GAMEPAD_AXIS_LAST
  error:
    prefix: GLFW_
    values:
      - GLFW_NO_ERROR
      - GLFW_NOT_INITIALIZED
      - GLFW_NO_CURRENT_CONTEXT
      - GLFW_INVALID_ENUM
      - GLFW_INVALID_VALUE
      - GLFW_OUT_OF_MEMORY
      - GLFW_API_UNAVAILABLE
      - GLFW_VERSION_UNAVAILABLE
      - GLFW_PLATFORM_ERROR
      - GLFW_FORMAT_UNAVAILABLE
      - GLFW_NO_WINDOW_CONTEXT
      - GLFW_CURSOR_UNAVAILABLE
      - GLFW_FEATURE_UNAVAILABLE
      - GLFW_FEATURE_UNIMPLEMENTED
      - GLFW_PLATFORM_UNAVAILABLE
  window_attrib:
    prefix: GLFW_
    values:
      - GLFW_FOCUSED
      - GLFW_ICONIFIED
      - GLFW_RESIZABLE
      - GLFW_VISIBLE
      - GLFW_DECORATED
      - GLFW_AUTO_ICONIFY
      - GLFW_FLOATING
      - GLFW_MAXIMIZED
      - GLFW_TRANSPARENT_FRAMEBUFFER
      - GLFW_HOVERED
      - GLFW_FOCUS_ON_SHOW
      - GLFW_MOUSE_PASSTHROUGH
  window_hint:
    prefix: GLFW_
    values:
      - GLFW_FOCUSED
      - GLFW_ICONIFIED
      - GLFW_RESIZABLE
      - GLFW_VISIBLE
      - GLFW_DECORATED
      - GLFW_AUTO_ICONIFY
      - GLFW_FLOATING
      - GLFW_MAXIMIZED
      - GLFW_CENTER_CURSOR
      - GLFW_TRANSPARENT_FRAMEBUFFER
      - GLFW_FOCUS_ON_SHOW
      - GLFW_MOUSE_PASSTHROUGH
      - GLFW_POSITION_X
      - GLFW_POSITION_Y
      - GLFW_RED_BITS
      - GLFW_GREEN_BITS
      - GLFW_BLUE_BITS
      - GLFW_ALPHA_BITS
      - GLFW_DEPTH_BITS
      - GLFW_STENCIL_BITS
      - GLFW_ACCUM_RED_BITS
      - GLFW_ACCUM_GREEN_BITS
      - GLFW_ACCUM_BLUE_BITS
      - GLFW_ACCUM_ALPHA_BITS
      - GLFW_AUX_BUFFERS
      - GLFW_STEREO
      - GLFW_SAMPLES
      - GLFW_SRGB_CAPABLE
      - GLFW_REFRESH_RATE
      - GLFW_DOUBLEBUFFER
      - GLFW_CLIENT_API
      - GLFW_CONTEXT_VERSION_MAJOR
      - GLFW_CONTEXT_VERSION_MINOR
      - GLFW_CONTEXT_REVISION
      - GLFW_CONTEXT_ROBUSTNESS
      - GLFW_OPENGL_FORWARD_COMPAT
      - GLFW_CONTEXT_DEBUG
      - GLFW_OPENGL_PROFILE
      - GLFW_CONTEXT_RELEASE_BEHAVIOR
      - GLFW_CONTEXT_NO_ERROR
      - GLFW_CONTEXT_CREATION_API
      - GLFW_SCALE_TO_MONITOR
      - GLFW_SCALE_FRAMEBUFFER
      - GLFW_COCOA_RETINA_FRAMEBUFFER
      - GLFW_COCOA_FRAME_NAME
      - GLFW_COCOA_GRAPHICS_SWITCHING
      - GLFW_X11_CLASS_NAME
      - GLFW_X11_INSTANCE_NAME
      - GLFW_WIN32_KEYBOARD_MENU
      - GLFW_WIN32_SHOWDEFAULT
      - GLFW_WAYLAND_APP_ID
  window_hint_client_api:
    prefix: GLFW_
    values:
      - GLFW_NO_API
      - GLFW_OPENGL_API
      - GLFW_OPENGL_ES_API
  window_hint_context_robustness:
    prefix: GLFW_
    values:
      - GLFW_NO_ROBUSTNESS
      - GLFW_NO_RESET_NOTIFICATION
      - GLFW_LOSE_CONTEXT_ON_RESET
  window_hint_opengl_profile:
    prefix: GLFW_OPENGL_
    suffix: _PROFILE
    values:
      - GLFW_OPENGL_ANY_PROFILE
      - GLFW_OPENGL_CORE_PROFILE
      - GLFW_OPENGL_COMPAT_PROFILE
  window_hint_context_release_behavior:
    prefix: GLFW_RELEASE_BEHAVIOR_
    values:
      - GLFW_RELEASE_BEHAVIOR_ANY
      - GLFW_RELEASE_BEHAVIOR_FLUSH
      - GLFW_RELEASE_BEHAVIOR_NONE
  window_hint_context_creation_api:
    prefix: GLFW_
    suffix: _CONTEXT_API
    values:
      - GLFW_NATIVE_CONTEXT_API
      - GLFW_EGL_CONTEXT_API
      - GLFW_OSMESA_CONTEXT_API
  input_mode:
    prefix: GLFW_
    values:
      - GLFW_CURSOR
      - GLFW_STICKY_KEYS
      - GLFW_STICKY_MOUSE_BUTTONS
      - GLFW_LOCK_KEY_MODS
      - GLFW_RAW_MOUSE_MOTION
  input_mode_cursor:
    prefix: GLFW_CURSOR_
    values:
      - GLFW_CURSOR_NORMAL
      - GLFW_CURSOR_HIDDEN
      - GLFW_CURSOR_DISABLED
      - GLFW_CURSOR_CAPTURED
  init_hint:
    prefix: GLFW_
    values:
      - GLFW_PLATFORM
      - GLFW_JOYSTICK_HAT_BUTTONS
      - GLFW_ANGLE_PLATFORM_TYPE
      - GLFW_COCOA_CHDIR_RESOURCES
      - GLFW_COCOA_MENUBAR
      - GLFW_WAYLAND_LIBDECOR
      - GLFW_X11_XCB_VULKAN_SURFACE
  platform:
    prefix: GLFW_PLATFORM_
    values:
      - GLFW_PLATFORM_WIN32
      - GLFW_PLATFORM_COCOA
      - GLFW_PLATFORM_WAYLAND
      - GLFW_PLATFORM_X11
      - GLFW_PLATFORM_NULL
  init_hint_platform:
    prefix: GLFW_PLATFORM_
    values:
      - GLFW_PLATFORM_ANY
      - GLFW_PLATFORM_WIN32
      - GLFW_PLATFORM_COCOA
      - GLFW_PLATFORM_WAYLAND
      - GLFW_PLATFORM_X11
      - GLFW_PLATFORM_NULL
  init_hint_angle_platform_type:
    prefix: GLFW_ANGLE_PLATFORM_TYPE_
    values:
      - GLFW_ANGLE_PLATFORM_TYPE_NONE
      - GLFW_ANGLE_PLATFORM_TYPE_OPENGL
      - GLFW_ANGLE_PLATFORM_TYPE_OPENGLES
      - GLFW_ANGLE_PLATFORM_TYPE_D3D9
      - GLFW_ANGLE_PLATFORM_TYPE_D3D11
      - GLFW_ANGLE_PLATFORM_TYPE_VULKAN
      - GLFW_ANGLE_PLATFORM_TYPE_METAL
  init_hint_wayland_libdecor:
    prefix: GLFW_WAYLAND_
    suffix: _LIBDECOR
    values:
      - GLFW_WAYLAND_PREFER_LIBDECOR
      - GLFW_WAYLAND_DISABLE_LIBDECOR
  cursor_shape:
    prefix: GLFW_
    suffix: _CURSOR
    values:
      - GLFW_ARROW_CURSOR
      - GLFW_IBEAM_CURSOR
      - GLFW_CROSSHAIR_CURSOR
      - GLFW_POINTING_HAND_CURSOR
      - GLFW_RESIZE_EW_CURSOR
      - GLFW_RESIZE_NS_CURSOR
      - GLFW_RESIZE_NWSE_CURSOR
      - GLFW_RESIZE_NESW_CURSOR
      - GLFW_RESIZE_ALL_CURSOR
      - GLFW_NOT_ALLOWED_CURSOR
      - GLFW_HRESIZE_CURSOR
      - GLFW_VRESIZE_CURSOR
      - GLFW_HAND_CURSOR
  joystick_event:
    prefix: GLFW_
    values:
      - GLFW_CONNECTED
      - GLFW_DISCONNECTED
  const:
    prefix: GLFW_
    values:
      - GLFW_TRUE
      - GLFW_FALSE
      - GLFW_ANY_POSITION
      - GLFW_DONT_CARE

hints:
  window_hint:
    GLFW_FOCUSED: bool
    GLFW_ICONIFIED: bool
    GLFW_RESIZABLE: bool
    GLFW_VISIBLE: bool
    GLFW_DECORATED: bool
    GLFW_AUTO_ICONIFY: bool
    GLFW_FLOATING: bool
    GLFW_MAXIMIZED: bool
    GLFW_CENTER_CURSOR: bool
    GLFW_TRANSPARENT_FRAMEBUFFER: bool
    GLFW_FOCUS_ON_SHOW: bool
    GLFW_MOUSE_PASSTHROUGH: bool
    GLFW_POSITION_X: int # or GLFW_ANY_POSITION
    GLFW_POSITION_Y: int
    GLFW_RED_BITS: int # or GLFW_DONT_CARE
    GLFW_GREEN_BITS: int
    GLFW_BLUE_BITS: int
    GLFW_ALPHA_BITS: int
    GLFW_DEPTH_BITS: int
    GLFW_STENCIL_BITS: int
    GLFW_ACCUM_RED_BITS: int
    GLFW_ACCUM_GREEN_BITS: int
    GLFW_ACCUM_BLUE_BITS: int
    GLFW_ACCUM_ALPHA_BITS: int
    GLFW_AUX_BUFFERS: int
    GLFW_SAMPLES: int
    GLFW_REFRESH_RATE: int
    GLFW_STEREO: bool
    GLFW_SRGB_CAPABLE: bool
    GLFW_DOUBLEBUFFER: bool
    GLFW_CLIENT_API: window_hint_client_api
    GLFW_CONTEXT_VERSION_MAJOR: int
    GLFW_CONTEXT_VERSION_MINOR: int
    GLFW_CONTEXT_REVISION: int
    GLFW_CONTEXT_ROBUSTNESS: window_hint_context_robustness
    GLFW_OPENGL_FORWARD_COMPAT: bool
    GLFW_CONTEXT_DEBUG: bool
    GLFW_OPENGL_PROFILE: window_hint_opengl_profile
    GLFW_CONTEXT_RELEASE_BEHAVIOR: window_hint_context_release_behavior
    GLFW_CONTEXT_NO_ERROR: bool
    GLFW_CONTEXT_CREATION_API: window_hint_context_creation_api
    GLFW_SCALE_TO_MONITOR: bool
    GLFW_SCALE_FRAMEBUFFER: bool
    GLFW_COCOA_FRAME_NAME: string
    GLFW_COCOA_GRAPHICS_SWITCHING: bool
    GLFW_X11_CLASS_NAME: string
    GLFW_X11_INSTANCE_NAME: string
    GLFW_WIN32_KEYBOARD_MENU: bool
    GLFW_WIN32_SHOWDEFAULT: bool
    GLFW_WAYLAND_APP_ID: string
  init_hint:
    GLFW_PLATFORM: init_hint_platform
    GLFW_JOYSTICK_HAT_BUTTONS: bool
    GLFW_ANGLE_PLATFORM_TYPE: init_hint_angle_platform_type
    GLFW_COCOA_CHDIR_RESOURCES: bool
    GLFW_COCOA_MENUBAR: bool
    GLFW_WAYLAND_LIBDECOR: init_hint_wayland_libdecor
    GLFW_X11_XCB_VULKAN_SURFACE: bool

window_attribs:
  GLFW_FOCUSED:
    readonly: true
  GLFW_ICONIFIED:
    readonly: true
  GLFW_RESIZABLE:
    readonly: false
  GLFW_VISIBLE:
    readonly: true
  GLFW_DECORATED:
    readonly: false
  GLFW_AUTO_ICONIFY:
    readonly: false
  GLFW_FLOATING:
    readonly: false
  GLFW_MAXIMIZED:
    readonly: true
  GLFW_TRANSPARENT_FRAMEBUFFER:
    readonly: true
  GLFW_HOVERED:
    readonly: true
  GLFW_FOCUS_ON_SHOW:
    readonly: false
  GLFW_MOUSE_PASSTHROUGH:
    readonly: true

window_events:
  WindowPos:
    parameters:
    - name: xpos
      type: int
    - name: ypos
      type: int
  WindowSize:
    parameters:
    - name: width
      type: int
    - name: height
      type: int
  WindowClose:
    parameters: []
  WindowRefresh:
    parameters: []
  WindowFocus:
    parameters:
    - name: focused
      type: int
      enum: bool
  WindowIconify:
    parameters:
    - name: iconified
      type: int
      enum: bool
  WindowMaximize:
    parameters:
      - name: maximized
        type: int
        enum: bool
  FramebufferSize:
    parameters:
    - name: width
      type: int
    - name: height
      type: int
  WindowContentScale:
    parameters:
    - name: xscale
      type: float
    - name: yscale
      type: float
  Key:
    parameters:
    - name: key
      type: int
      enum: key
    - name: scancode
      type: int
    - name: action
      type: int
      enum: action
    - name: mods
      type: int
      enum: mods
  Char:
    parameters:
    - name: codepoint
      type: unsigned
  CharMods:
    parameters:
    - name: codepoint
      type: unsigned
    - name: mods
      type: int
      enum: mods
  MouseButton:
    parameters:
    - name: button
      type: int
      enum: button
    - name: action
      type: int
      enum: action
    - name: mods
      type: int
      enum: mods
  CursorPos:
    parameters:
    - name: xpos
      type: double
    - name: ypos
      type: double
  CursorEnter:
    parameters:
    - name: entered
      type: int
      enum: bool
  Scroll:
    parameters:
    - name: xoffset
      type: double
    - name: yoffset
      type: double
  Drop:
    parameters:
    - name: count
      type: int
      count_for: paths
    - name: paths
      type: const char**
